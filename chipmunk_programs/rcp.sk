/* 
// Original program: 
/* 
// Original program: 
#define MAX_ALLOWABLE_RTT 30

// Total number of bytes seen so far.
int input_traffic_Bytes = 0;

// Sum of rtt so far
int sum_rtt_Tr = 0;

// Number of packets with a valid RTT
int num_pkts_with_rtt = 0;

struct Packet {
  int size_bytes;
  int rtt;
};

void func(struct Packet pkt) {
  input_traffic_Bytes += pkt.size_bytes;
  if (pkt.rtt < MAX_ALLOWABLE_RTT) {
    sum_rtt_Tr += pkt.rtt;
    num_pkts_with_rtt += 1;
  }
}
 */

int state_0 = 0;
int state_1 = 0;
int state_2 = 0;
struct Packet{
    int pkt_0;
    int pkt_1;
};
void func(struct Packet p) {
state_0+=p.pkt_0;
if (p.pkt_1<30) {state_1+=p.pkt_1;
state_2+=1;
;}

}
 */

|StateAndPacket| program (|StateAndPacket| state_and_packet) {
state_and_packet.state_0+=state_and_packet.pkt_0;
if (state_and_packet.pkt_1<30) {state_and_packet.state_1+=state_and_packet.pkt_1;
state_and_packet.state_2+=1;

;}
  return state_and_packet;
}
