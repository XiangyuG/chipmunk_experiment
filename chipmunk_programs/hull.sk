/* 
// Original program: 
/* 
// Original program: 
#define DRAIN_RATE 10
#define ECN_THRESH 20

int counter   = ECN_THRESH;
int last_time = 0;

struct Packet {
  int bytes;
  int time;
  int mark;
};

void func(struct Packet p) {
  // Decrement counter according to drain rate
  counter = counter - (p.time - last_time) * DRAIN_RATE;
  if (counter < 0) counter = 0;

  // Increment counter
  counter += p.bytes;

  // If we are above the ECN_THRESH, mark
  if (counter > ECN_THRESH) p.mark = 1;

  // Store last time
  last_time = p.time;
}
 */

int state_1 = 20;
int state_0 = 0;
struct Packet{
    int pkt_1;
    int pkt_0;
    int pkt_2;
};
void func(struct Packet p) {
state_1=state_1-(p.pkt_0-state_0)*10;
if (state_1<0) {state_1=0;}
state_1+=p.pkt_1;
if (state_1>20) {p.pkt_2=1;}
state_0=p.pkt_0;

}
 */

|StateAndPacket| program (|StateAndPacket| state_and_packet) {
state_and_packet.state_1=state_and_packet.state_1-(state_and_packet.pkt_0-state_and_packet.state_0)*10;
if (state_and_packet.state_1<0) {state_and_packet.state_1=0;
;}
state_and_packet.state_1+=state_and_packet.pkt_1;
if (state_and_packet.state_1>20) {state_and_packet.pkt_2=1;
;}
state_and_packet.state_0=state_and_packet.pkt_0;
  return state_and_packet;
}
