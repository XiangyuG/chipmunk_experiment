/* 
// Original program: 
/* 
// Original program: 
//#include "hashes.h"

#define NUM_FLOWLETS 8000
#define THRESHOLD    5
#define NUM_HOPS     10

struct Packet {
  int sport;
  int dport;
  int new_hop;
  int arrival;
  int next_hop;
  int id; // array index
};

int last_time [NUM_FLOWLETS] = {0};
int saved_hop [NUM_FLOWLETS] = {0};

void flowlet(struct Packet pkt) {
//  pkt.new_hop = hash3(pkt.sport,
//                      pkt.dport,
//                      pkt.arrival)
//                % NUM_HOPS;

//  pkt.id  = hash2(pkt.sport,
//                  pkt.dport)
//            % NUM_FLOWLETS;

  pkt.new_hop = pkt.new_hop;
  pkt.id = pkt.id;

  if (pkt.arrival -
      last_time[pkt.id] >
      THRESHOLD) {
    saved_hop[pkt.id] = pkt.new_hop;
  }

  last_time[pkt.id] = pkt.arrival;
  pkt.next_hop = saved_hop[pkt.id];
}
 */

struct Packet{
    int sport;
    int dport;
    int pkt_0;
    int pkt_2;
    int pkt_3;
    int pkt_1;
};
int state_1 = { 0 };
int state_0 = { 0 };
void func(struct Packet p) {
p.pkt_0=p.pkt_0;
p.pkt_1=p.pkt_1;
if (p.pkt_2-state_1>5) {state_0=p.pkt_0;
;}
state_1=p.pkt_2;
p.pkt_3=state_0;

}
 */

|StateAndPacket| program (|StateAndPacket| state_and_packet) {
state_and_packet.pkt_0=state_and_packet.pkt_0;
state_and_packet.pkt_1=state_and_packet.pkt_1;
if (state_and_packet.pkt_2-state_and_packet.state_1>5) {state_and_packet.state_0=state_and_packet.pkt_0;

;}
state_and_packet.state_1=state_and_packet.pkt_2;
state_and_packet.pkt_3=state_and_packet.state_0;
  return state_and_packet;
}
